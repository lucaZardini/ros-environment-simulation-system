# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dist_project/robot_data.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class robot_data(genpy.Message):
  _md5sum = "de74b7f6fa08eefd9305c86ead89bd1b"
  _type = "dist_project/robot_data"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string robot_id
float64 target_height
float64 x
float64 y
float64 theta
float64 sigma_x
float64 sigma_y
float64 sigma_theta"""
  __slots__ = ['robot_id','target_height','x','y','theta','sigma_x','sigma_y','sigma_theta']
  _slot_types = ['string','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_id,target_height,x,y,theta,sigma_x,sigma_y,sigma_theta

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(robot_data, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robot_id is None:
        self.robot_id = ''
      if self.target_height is None:
        self.target_height = 0.
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.theta is None:
        self.theta = 0.
      if self.sigma_x is None:
        self.sigma_x = 0.
      if self.sigma_y is None:
        self.sigma_y = 0.
      if self.sigma_theta is None:
        self.sigma_theta = 0.
    else:
      self.robot_id = ''
      self.target_height = 0.
      self.x = 0.
      self.y = 0.
      self.theta = 0.
      self.sigma_x = 0.
      self.sigma_y = 0.
      self.sigma_theta = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.robot_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.target_height, _x.x, _x.y, _x.theta, _x.sigma_x, _x.sigma_y, _x.sigma_theta))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.target_height, _x.x, _x.y, _x.theta, _x.sigma_x, _x.sigma_y, _x.sigma_theta,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.robot_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.target_height, _x.x, _x.y, _x.theta, _x.sigma_x, _x.sigma_y, _x.sigma_theta))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.target_height, _x.x, _x.y, _x.theta, _x.sigma_x, _x.sigma_y, _x.sigma_theta,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
