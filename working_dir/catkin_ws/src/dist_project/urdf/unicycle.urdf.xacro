<?xml version="1.0"?>
<robot name="unicycle" xmlns:xacro="http://ros.org/wiki/xacro">

<!-- Defining the colors used in this robot -->
<material name="Black">
<color rgba="0.0 0.0 0.0 1.0"/>
</material>

<material name="Red">
<color rgba="0.8 0.0 0.0 1.0"/>
</material>

<material name="White">
<color rgba="1.0 1.0 1.0 1.0"/>
</material>


<material name="Blue">
<color rgba="0.0 0.0 0.8 1.0"/>
</material>

<!-- PROPERTY LIST -->
<!--All units in m-kg-s-radians unit system -->
<xacro:property name="M_PI" value="3.1415926535897931" />
<xacro:property name="M_PI_2" value="1.570796327" />
<xacro:property name="DEG_TO_RAD" value="0.017453293" />

<!-- Main body dimensions and mass -->
<xacro:property name="base_mass" value="5.0" />  <!-- kg -->
<xacro:property name="base_length" value="0.30" /> 
<xacro:property name="base_width" value="0.20" /> 
<xacro:property name="base_height" value="0.03" /> 

<!-- Front caster wheel mass, height and radius -->
<xacro:property name="caster_f_mass" value="0.5" /> 
<xacro:property name="caster_f_height" value="0.04" /> 
<xacro:property name="caster_f_radius" value="0.025" /> 

<!-- Back caster wheel mass, height and radius -->
<xacro:property name="caster_b_mass" value="0.5" /> <!-- in kg-->
<xacro:property name="caster_b_height" value="0.04" /> 
<xacro:property name="caster_b_radius" value="0.025" /> 

<!-- Wheels -->
<xacro:property name="wheel_radius" value="0.04" />   <!--[m]-->
<xacro:property name="wheel_height" value="0.02" />   <!--[m]--> 
<xacro:property name="wheel_mass" value="2.5" />      <!--[kg]-->

<xacro:property name="base_x_origin_to_wheel_origin" value="0.06" />  <!--[m]-->
<xacro:property name="base_y_origin_to_wheel_origin" value="0.22" />   <!--[m]--> <!-- base_width + wheel_height -->
<xacro:property name="base_z_origin_to_wheel_origin" value="0.0" />   <!--[m]-->

<!-- Macro for calculating inertia of cylinder -->
<xacro:macro name="cylinder_inertia" params="m r h">
    <inertia  ixx="${m*(3*r*r+h*h)/12}" ixy = "0" ixz = "0"
                iyy="${m*(3*r*r+h*h)/12}" iyz = "0"
                izz="${m*r*r/2}" />
</xacro:macro>

<!-- Macro for calculating inertia of box -->
<xacro:macro name="box_inertia" params="m w d h">
    <inertia ixx="${1/12*m*(h*h + d*d)}" ixy = "0" ixz = "0"
                iyy="${1/12*m*(w*w + d*d)}" iyz = "0"
                izz="${1/12*m*(w*w + h*h)}" /> 
</xacro:macro>

<!-- BASE-GROUND -->
<!-- Center of main box projected to groudn -->
<link name="base_ground">
    <inertial>
        <mass value="0.0001" />
        <origin xyz="0 0 0" />
        <inertia ixx="0.0001" ixy="0.0" ixz="0.0"
            iyy="0.0001" iyz="0.0" 
            izz="0.0001" />
    </inertial>

    <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
            <box size="0.001 0.001 0.001" />
        </geometry>
    </visual>
</link>

<gazebo reference="base_ground">
    <turnGravityOff>false</turnGravityOff>
</gazebo>

<joint name="base_ground_joint" type="fixed">
    <origin xyz="0 0 ${wheel_radius - base_z_origin_to_wheel_origin}" rpy="0 0 0" />
    <parent link="base_ground"/>
    <child link="base_link" />
</joint>


<!-- MAIN BODY, base_link -->
  
<link name="base_link">
    <inertial>
        <mass value="${base_mass}" />
        <origin xyz="0 0 0" />
        <inertia ixx="0.0001" ixy="0.0" ixz="0.0"
            iyy="0.0001" iyz="0.0" 
            izz="0.0001" />
        <box_inertia  m="${base_mass}" w="${base_width}" l = "${base_length}" h="${base_height}" />
    </inertial>

    <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
            <!-- <box size="${base_length} ${base_width} ${base_height}" /> -->
            <mesh filename="package://dist_project/mesh/base.stl" scale="0.01 0.01 0.01" />
        </geometry>
        <material name="White" />
    </visual>
        
    <collision>
        <origin xyz="0 0 ${wheel_radius - base_z_origin_to_wheel_origin - 0.019}" rpy="0 0 0 " /> <!-- -0.019 added since tinkercad is not precise -->
        <geometry>
            <box size="${base_length} ${base_width} ${base_height + 0.04}" />
        </geometry>
    </collision>     
</link>

<gazebo reference="base_link">
    <material>Gazebo/Red</material>
    <turnGravityOff>false</turnGravityOff>
</gazebo>
  
<link name="caster_front_link">
    <visual>
        <origin xyz="0 0.02 0" rpy="${M_PI/2} 0 0" />
        <geometry>
                <sphere radius="${caster_f_radius}" />
        </geometry>
        <material name="Black" />
    </visual>

    <collision>
        <geometry>
            <sphere radius="${caster_f_radius}" />
        </geometry>
        <origin xyz="0 0.02 0" rpy="${M_PI/2} 0 0" />
    </collision>

    <inertial>
        <mass value="${caster_f_mass}" />
        <origin xyz="0 0 0" />
        <inertia ixx="0.001" ixy="0.0" ixz="0.0"
                iyy="0.001" iyz="0.0" 
                izz="0.001" />
    </inertial>
</link>

<joint name="caster_front_joint" type="fixed">
    <parent link="base_link"/>
    <child link="caster_front_link"/>
    <origin xyz="0.115 0.0 0.007" rpy="${-M_PI/2} 0 0"/>
</joint>

<gazebo reference="caster_front_link">
    <turnGravityOff>false</turnGravityOff>
    <mu1 value="0.000001"/>
    <mu2 value="0.000001"/>
    <material>Gazebo/Black</material>
</gazebo>

<link name="caster_back_link">
    <visual>
        <origin xyz="0.02 0.02 0 " rpy="${M_PI/2} 0 0" /> 
        <geometry>
            <sphere radius="${caster_b_radius}" />
        </geometry>
        <material name="Black" />
    </visual>

    <collision>
        <geometry>
            <sphere radius="${caster_b_radius}" />
        </geometry>
        <origin xyz="0.02 0.02 0 " rpy="${M_PI/2} 0 0" /> 
    </collision>
            
    <inertial>
        <mass value="${caster_b_mass}" />
        <origin xyz="0 0 0" />        
        <inertia ixx="0.001" ixy="0.0" ixz="0.0"
                iyy="0.001" iyz="0.0" 
                izz="0.001" />
    </inertial>
</link>

<joint name="caster_back_joint" type="fixed">
    <parent link="base_link"/>
    <child link="caster_back_link"/>
    <origin xyz="-0.135 0.0 0.009" rpy="${-M_PI/2} 0 0"/>
</joint>

<gazebo reference="caster_back_link">
    <turnGravityOff>false</turnGravityOff>
    <mu1 value="0.000001"/>
    <mu2 value="0.000001"/>
    <material>Gazebo/Black</material>
</gazebo>

<!-- RIGHT WHEEL DEFINITION -->

<link name="front_right_wheel">
    <visual>
    <origin xyz="0 0 0" rpy="${M_PI/2} 0  0 " /> 
    <geometry>
        <mesh filename="package://dist_project/mesh/wheel.stl" scale="0.001 0.001 0.001" />
    </geometry>
    <material name="Red">
        <color rgba="0.8 0.0 0.0 1.0"/>
    </material>
    </visual>

    <collision>
    <origin xyz="0 0 0" rpy="${M_PI/2} 0 0 " />
    <geometry>
        <cylinder length="${wheel_height}" radius="${wheel_radius}" />
    </geometry>
    </collision>

    <inertial>
    <mass value="${wheel_mass}" />
    <origin xyz="0 0 0" />
            <inertia ixx="0.001" ixy="0.0" ixz="0.0"
            iyy="0.001" iyz="0.0" 
            izz="0.001" />
    </inertial>
</link>

<!-- Physic parameters for Gazebo -->
<gazebo reference="front_right_wheel">
    <mu1 value="1.0"/>
    <mu2 value="1.0"/>
    <kp  value="10000000.0"/>
    <kd  value="1.0" />
    <fdir1 value="1 0 0"/>
    <material>Gazebo/Grey</material>
    <turnGravityOff>false</turnGravityOff>
</gazebo>

<joint name="front_right_wheel_joint" type="continuous">
    <parent link="base_link"/>
    <child link="front_right_wheel"/>
    <origin xyz="${-1 * base_x_origin_to_wheel_origin} ${-0.5 * base_y_origin_to_wheel_origin} ${base_z_origin_to_wheel_origin}" rpy="0 0 0" /> 
    <axis xyz="0 1 0" rpy="0 0 0" />
    <limit effort="100" velocity="100"/>
    <joint_properties damping="0.0" friction="0.0"/>
</joint>

<!-- Transmission: to link joint and controller -->
<transmission name="front_right_wheel_joint_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="front_right_wheel_joint" />

    <!-- Define Actuation type-->
    <actuator name="front_right_wheel_joint_motor">
    <hardwareInterface>EffortJointInterface</hardwareInterface>
    <mechanicalReduction>1</mechanicalReduction>
    </actuator>
</transmission>

<!-- LEFT WHEEL DEFINITION -->

<link name="front_left_wheel">
    <visual>
    <origin xyz="0 0 0" rpy="${M_PI/2} 0  0 " /> 
    <geometry>
        <mesh filename="package://dist_project/mesh/wheel.stl" scale="0.001 0.001 0.001" />
    </geometry>
    <material name="Red">
        <color rgba="0.8 0.0 0.0 1.0"/>
    </material>
    </visual>

    <collision>
    <origin xyz="0 0 0" rpy="${M_PI/2} 0 0 " />
    <geometry>
        <cylinder length="${wheel_height}" radius="${wheel_radius}" />
    </geometry>
    </collision>

    <inertial>
    <mass value="${wheel_mass}" />
    <origin xyz="0 0 0" />
            <inertia ixx="0.001" ixy="0.0" ixz="0.0"
            iyy="0.001" iyz="0.0" 
            izz="0.001" />
    </inertial>
</link>

<!-- Physic parameters for Gazebo -->
<gazebo reference="front_left_wheel">
    <mu1 value="1.0"/>
    <mu2 value="1.0"/>
    <kp  value="10000000.0"/>
    <kd  value="1.0" />
    <fdir1 value="1 0 0"/>
    <material>Gazebo/Grey</material>
    <turnGravityOff>false</turnGravityOff>
</gazebo>

<joint name="front_left_wheel_joint" type="continuous">
    <parent link="base_link"/>
    <child link="front_left_wheel"/>
    <origin xyz="${-1 * base_x_origin_to_wheel_origin} ${0.5 * base_y_origin_to_wheel_origin} ${base_z_origin_to_wheel_origin}" rpy="0 0 0" /> 
    <axis xyz="0 1 0" rpy="0 0 0" />
    <limit effort="100" velocity="100"/>
    <joint_properties damping="0.0" friction="0.0"/>
</joint>

<!-- Transmission: to link joint and controller -->
<transmission name="front_left_wheel_joint_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="front_left_wheel_joint" />

    <!-- Define Actuation type-->
    <actuator name="front_left_wheel_joint_motor">
    <hardwareInterface>EffortJointInterface</hardwareInterface>
    <mechanicalReduction>1</mechanicalReduction>
    </actuator>
</transmission>

<!-- CAMERA DEFINITION -->

<link name="camera_link">
    <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
            <box size="0.01 0.03 0.03" />
        </geometry>
        <material name="Blue" />
    </visual>
</link>

<joint name="camera_optical_joint" type="fixed">
    <parent link="camera_link" />
    <child link="camera_optical_link" />
    <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}" />
</joint>

<link name="camera_optical_link"></link>

<joint name="camera_joint" type="fixed">
    <parent link="base_link"/>
    <child link="camera_link"/>
    <origin xyz="0.1 0 ${base_height/2 + 0.015}" rpy="0 0 0"/>
</joint>

<gazebo reference="camera_link">
    <material>Gazebo/Blue</material>

    <sensor name="camera" type="camera">
        <pose> 0 0 0 0 0 0 </pose>
        <visualize>true</visualize>
        <update_rate>30</update_rate>
        <camera>
            <horizontal_fov>2</horizontal_fov>
            <image>
                <format>R8G8B8</format>
                <width>640</width>
                <height>480</height>
            </image>
            <clip>
                <near>0.05</near>
                <far>8.00</far>
            </clip>
            <noise>
                <type>gaussian</type>
                <mean>0.0</mean>
                <stddev>0.07</stddev>
            </noise>
        </camera>
        <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
            <frame_name>camera_optical_link</frame_name>
            <cameraName>camera</cameraName>
        </plugin>
    </sensor>
</gazebo>

<link name="camera_tip_link">
    <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
            <box size="0.004 0.01 0.01" />
        </geometry>
        <material name="Blue" />
    </visual>
</link>

<joint name="camera_tip_joint" type="fixed">
    <parent link="camera_link"/>
    <child link="camera_tip_link"/>
    <origin xyz="${0.005+0.002} 0 0" rpy="0 0 0"/>
</joint>

<gazebo reference="camera_tip_link">
    <turnGravityOff>false</turnGravityOff>
    <material>Gazebo/Blue</material>
</gazebo>


<!-- Gazebo Plugins -->
<gazebo>
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
        <legacyMode>true</legacyMode>
        <rosDebugLevel>Debug</rosDebugLevel>
        <publishWheelTF>true</publishWheelTF>
        <publishWheelJointState>true</publishWheelJointState>
        <alwaysOn>true</alwaysOn>
        <updateRate>10.0</updateRate>
        <leftJoint>front_left_wheel_joint</leftJoint>
        <rightJoint>front_right_wheel_joint</rightJoint>
        <wheelSeparation>${base_width}</wheelSeparation>
        <wheelDiameter>${2*wheel_radius}</wheelDiameter>
        <broadcastTF>1</broadcastTF>
        <wheelTorque>30</wheelTorque>
        <wheelAcceleration>1.8</wheelAcceleration>
        <commandTopic>cmd_vel</commandTopic>
        <odometryFrame>odom</odometryFrame> 
        <odometryTopic>odom</odometryTopic> 
        <robotBaseFrame>base_ground</robotBaseFrame>
        <odometrySource>world</odometrySource>
        <publishTf>1</publishTf>
        <publishOdomTF>true</publishOdomTF>
    </plugin>
    <plugin name="p3d_base_controller" filename="libgazebo_ros_p3d.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>10</updateRate>
        <bodyName>base_link</bodyName>
        <topicName>ground_truth/state</topicName>
        <frameName>world</frameName>
    </plugin>
</gazebo>

</robot>